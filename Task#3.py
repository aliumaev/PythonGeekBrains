# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное
# (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:

    def __init__(self, nCells):
        self.nCells = nCells

    def __add__(self, other):
        return f"Результат сложения = {self.nCells + other.nCells}"

    def __sub__(self, other):
        result = self.nCells - other.nCells
        if result > 0:
            return f"Результат вычитания = {result}"
        else:
            return "The subtraction returns negative number. Please check data."

    def __mul__(self, other):
        return f"Результат умножения = {self.nCells * other.nCells}"

    def __floordiv__(self, other):
        return f"Результат деления = {self.nCells // other.nCells}"

    def make_order(self, numInRow):
        print("\n".join(["*" * numInRow for _ in range(self.nCells // numInRow)]) + "\n" + "*" * (self.nCells % numInRow))

    def __str__(self):
        return str(self.nCells)

Cell1 = Cell(27)
Cell2 = Cell(15)
print(Cell1 // Cell2)

Cell1.make_order(5)
